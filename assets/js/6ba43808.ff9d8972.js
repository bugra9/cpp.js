"use strict";(self.webpackChunk_cpp_js_website=self.webpackChunk_cpp_js_website||[]).push([[445],{1126:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"api/cpp-bindings/data-types","title":"Data Types","description":"Cpp.js efficiently bridges C++ and JavaScript, ensuring seamless type conversions. This page will cover primitive types as well as complex data structures, including enums, vectors, and maps.","source":"@site/docs/api/cpp-bindings/data-types.md","sourceDirName":"api/cpp-bindings","slug":"/api/cpp-bindings/data-types","permalink":"/docs/api/cpp-bindings/data-types","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1734795866000,"frontMatter":{},"sidebar":"API","previous":{"title":"Overview","permalink":"/docs/api/cpp-bindings/overview"},"next":{"title":"Functions","permalink":"/docs/api/cpp-bindings/functions"}}');var i=s(7557),r=s(7266);const d={},c="Data Types",l={},a=[{value:"Primitive Types",id:"primitive-types",level:3},{value:"Vector",id:"vector",level:3},{value:"Map",id:"map",level:3},{value:"Enum",id:"enum",level:3},{value:"Class Object",id:"class-object",level:3}];function o(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"data-types",children:"Data Types"})}),"\n",(0,i.jsx)(n.p,{children:"Cpp.js efficiently bridges C++ and JavaScript, ensuring seamless type conversions. This page will cover primitive types as well as complex data structures, including enums, vectors, and maps."}),"\n",(0,i.jsx)(n.h3,{id:"primitive-types",children:"Primitive Types"}),"\n",(0,i.jsx)(n.p,{children:"When C++ code is bound to JavaScript, the data types in C++ are mapped to equivalent JavaScript types. The following table outlines these mappings:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"C++ type"}),(0,i.jsx)(n.th,{children:"JavaScript type"}),(0,i.jsx)(n.th,{children:"Cpp.js Sample"}),(0,i.jsx)(n.th,{children:"JavaScript Sample"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void"})}),(0,i.jsx)(n.td,{children:"undefined"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void sample()"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sample()"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"bool"})}),(0,i.jsx)(n.td,{children:"true or false"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void sample(bool a)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sample(true)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"char"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void sample(char a)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sample(9)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"signed char"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void sample(signed char a)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sample(9)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"unsigned char"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void sample(unsigned char a)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sample(9)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"short"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void sample(short a)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sample(9)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"unsigned short"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void sample(unsigned short a)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sample(9)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"int"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void sample(int a)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sample(9)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"unsigned int"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void sample(unsigned int a)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sample(9)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"long"})}),(0,i.jsx)(n.td,{children:"BigInt"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void sample(long a)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sample(9n)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"unsigned long"})}),(0,i.jsx)(n.td,{children:"BigInt"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void sample(unsigned long a)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sample(9n)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"float"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void sample(float a)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sample(9.9)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"double"})}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void sample(double a)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sample(9.9)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"int64_t"})}),(0,i.jsx)(n.td,{children:"BigInt"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void sample(int64_t a)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sample(9n)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"uint64_t"})}),(0,i.jsx)(n.td,{children:"BigInt"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void sample(uint64_t a)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sample(9n)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"std::string"})}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void sample(std::string a)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sample('s')"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"emscripten::val"})}),(0,i.jsx)(n.td,{children:"anything"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"void sample(emscripten::val a)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"sample('s')"})})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"This table highlights how common primitive types in C++ correspond to their closest JavaScript equivalents when using Cpp.js"}),"\n",(0,i.jsx)(n.h3,{id:"vector",children:"Vector"}),"\n",(0,i.jsxs)(n.admonition,{type:"warning",children:[(0,i.jsx)(n.p,{children:"Cpp.js currently does not support direct handling of vectors. To manage them manually, you need to create a module file and define embind bindings for the required types."}),(0,i.jsx)(n.p,{children:"Here is a minimal example:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="/src/native/mycustom.i"',children:'#pragma once\n\n%module mycustom\n\n%{\nEMSCRIPTEN_BINDINGS(mycustom) {\n    emscripten::register_vector<int>("VectorInt");\n    emscripten::register_vector<std::string>("VectorString");\n    emscripten::register_vector<std::shared_ptr<Driver>>("VectorDriver");\n}\n%}\n\n%feature("shared_ptr");\n%feature("polymorphic_shared_ptr");\n'})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="/src/index.js"',children:"import './native/mycustom.i';\n"})})]}),"\n",(0,i.jsx)(n.p,{children:"Here is a minimal example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="C++"',children:"std::vector<int> getMyVector();\nvoid setMyVector(std::vector<int>);\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:'const myVector = getMyVector();\n\nfor (let i = 0; i < myVector.size(); i += 1) {\n    console.log("Vector Value: ", myVector.get(i));\n}\n\nconst newMyVector = new VectorInt();\nnewMyVector.push_back(9);\nsetMyVector(newMyVector);\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Conversion Between JavaScript Arrays and C++ Vectors"}),(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.a,{href:"/docs/api/javascript/utility-functions",children:"The utility JavaScript functions"}),", ",(0,i.jsx)(n.code,{children:"toVector"})," and ",(0,i.jsx)(n.code,{children:"toArray"}),", are used to convert a C++ Vector into a complete JavaScript Array and vice versa, transforming a JavaScript Array into a complete C++ Vector."]}),"\n",(0,i.jsx)(n.p,{children:"Here is a minimal example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:'const myVectorArray = toArray(getMyVector());\nmyVectorArray.forEach(value => console.log("Vector Value: ", value))\n\nmyVectorArray.push(9);\nsetMyVector(toVector(VectorInt, myVectorArray));\n'})}),"\n",(0,i.jsx)(n.h3,{id:"map",children:"Map"}),"\n",(0,i.jsxs)(n.admonition,{type:"warning",children:[(0,i.jsx)(n.p,{children:"Cpp.js currently does not support direct handling of maps. To manage them manually, you need to create a module file and define embind bindings for the required types."}),(0,i.jsx)(n.p,{children:"Here is a minimal example:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="/src/native/mycustom.i"',children:'#pragma once\n\n%module mycustom\n\n%{\nEMSCRIPTEN_BINDINGS(mycustom) {\n    emscripten::register_vector<int>("VectorInt");\n    emscripten::register_map<int, int>("MapIntInt");\n}\n%}\n\n%feature("shared_ptr");\n%feature("polymorphic_shared_ptr");\n'})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="/src/index.js"',children:"import './native/mycustom.i';\n"})})]}),"\n",(0,i.jsx)(n.p,{children:"Here is a minimal example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="C++"',children:"std::unordered_map<int, int> getMyMap();\nvoid setMyMap(std::unordered_map<int, int>);\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:'const myMap = getMyMap();\nconst myMapKeys = myMap.keys();\n\nfor (var i = 0; i < myMapKeys.size(); i++) {\n    var key = myMapKeys.get(i);\n    console.log("Map key/value: ", key, myMap.get(key));\n}\n\nconst newMyMap = new MapIntInt();\nnewMyMap.set(9, 9);\nsetMyMap(newMyMap);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"enum",children:"Enum"}),"\n",(0,i.jsx)(n.p,{children:'In C++, an enum is a user-defined type that consists of a set of named integral constants. It can be defined using the traditional "old style" or the strongly-typed "new style" introduced in C++11 (enum class).'}),"\n",(0,i.jsx)(n.p,{children:"Here is a minimal example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="C++"',children:"enum OldStyle {\n    OLD_STYLE_ONE,\n    OLD_STYLE_TWO\n};\n\nenum class NewStyle {\n    ONE,\n    TWO\n};\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"const oldStyle = OldStyle.ONE;\nconst newStyle = NewStyle.TWO;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"class-object",children:"Class Object"}),"\n",(0,i.jsx)(n.p,{children:"Here is a minimal example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="C++"',children:"class A {};\n\nstd::shared_ptr<A> getClassObject();\nvoid passClassObject(std::shared_ptr<A>);\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"const classObject = getClassObject();\nsetClassObject(classObject);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},7266:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>c});var t=s(8225);const i={},r=t.createContext(i);function d(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);