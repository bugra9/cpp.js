"use strict";(self.webpackChunk_cpp_js_website=self.webpackChunk_cpp_js_website||[]).push([[9516],{501:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"api/cpp-bindings/classes","title":"Classes and Objects","description":"A class is a blueprint for creating objects, defining their attributes (data members) and behaviors (member functions). Objects are instances of a class, allowing you to create and manipulate data in a structured, reusable way.","source":"@site/docs/api/cpp-bindings/classes.md","sourceDirName":"api/cpp-bindings","slug":"/api/cpp-bindings/classes","permalink":"/docs/api/cpp-bindings/classes","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1734795866000,"frontMatter":{},"sidebar":"API","previous":{"title":"Functions","permalink":"/docs/api/cpp-bindings/functions"},"next":{"title":"Overview","permalink":"/docs/api/javascript/overview"}}');var a=t(7557),i=t(7266);const r={},c="Classes and Objects",l={},o=[{value:"Constructors, Member Functions",id:"constructors-member-functions",level:3},{value:"Inheritance",id:"inheritance",level:3},{value:"Polymorphism",id:"polymorphism",level:3},{value:"Interfaces (Abstract Classes)",id:"interfaces-abstract-classes",level:3}];function h(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"classes-and-objects",children:"Classes and Objects"})}),"\n",(0,a.jsx)(n.p,{children:"A class is a blueprint for creating objects, defining their attributes (data members) and behaviors (member functions). Objects are instances of a class, allowing you to create and manipulate data in a structured, reusable way."}),"\n",(0,a.jsx)(n.h3,{id:"constructors-member-functions",children:"Constructors, Member Functions"}),"\n",(0,a.jsx)(n.p,{children:"Here is a minimal example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",metastring:'title="/src/native/MyClass.h"',children:"class MyClass {\n    public:\n        MyClass(int x) : x(x) {}\n        int getX() { return x; }\n        static int getVersion() { return 1; }\n    private:\n        int x;\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="/src/index.js"',children:"import { initCppJs } './native/MyClass.h';\nconst { MyClass } = await initCppJs();\n\nconst version = MyClass.getVersion(); // static member function\n\nconst myObject = new MyClass(9); // constructor\nconst x = myObject.getX(); // member function\n\nconsole.log(`version: ${version}, x: ${x}`); // version: 1, x: 9\n"})}),"\n",(0,a.jsx)(n.h3,{id:"inheritance",children:"Inheritance"}),"\n",(0,a.jsx)(n.p,{children:"Here is a minimal example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",metastring:'title="C++"',children:"class Shape {\n   public:\n      void setWidth(int w) {\n         width = w;\n      }\n      void setHeight(int h) {\n         height = h;\n      }\n      \n   protected:\n      int width;\n      int height;\n};\n\n// Derived class\nclass Rectangle: public Shape {\n   public:\n      int getArea() { \n         return (width * height); \n      }\n};\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"const rectangle = new Rectangle();\n\nrectangle.setWidth(5);\nrectangle.setHeight(7);\n\nconsole.log(`Total area: ${rectangle.getArea()}`); // Print the area of the object.\n"})}),"\n",(0,a.jsx)(n.h3,{id:"polymorphism",children:"Polymorphism"}),"\n",(0,a.jsx)(n.p,{children:"Here is a minimal example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",metastring:'title="C++"',children:"class Shape {\n   protected:\n      int width, height;\n      \n   public:\n      Shape( int a = 0, int b = 0){\n         width = a;\n         height = b;\n      }\n      int area() {\n         return width * height;\n      }\n};\n\nclass Triangle: public Shape {\n   public:\n      Triangle( int a = 0, int b = 0) : Shape(a, b) { }\n      \n      int area () { \n         return (width * height / 2); \n      }\n};\n\nint getShapeArea(std::shared_ptr<Shape> shape) {\n    return shape->area();\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"const triangle = new Triangle(10, 5);\nconst triangleArea = triangle.area();\nconst shapeArea = getShapeArea(triangle);\n\nconsole.log(`triangle area: ${triangleArea}`); // triangle area: 25\nconsole.log(`shape area: ${shapeArea}`); // shape area: 50\n"})}),"\n",(0,a.jsx)(n.h3,{id:"interfaces-abstract-classes",children:"Interfaces (Abstract Classes)"}),"\n",(0,a.jsx)(n.p,{children:"Pure virtual functions must be implemented in JavaScript."}),"\n",(0,a.jsx)(n.p,{children:"Here is a minimal example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",metastring:'title="C++"',children:"class Rectangle {\n   public:\n      // pure virtual function providing interface framework.\n      virtual int getArea() = 0;\n\n      void setWidth(int w) {\n         width = w;\n      }\n   \n      void setHeight(int h) {\n         height = h;\n      }\n\n      int getWidth() { return width; }\n      int getHeight() { return height; }\n   \n   protected:\n      int width;\n      int height;\n};\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:'title="JavaScript"',children:"Rectangle.implement({\n    getArea: function() {\n        return this.getWidth() * this.getHeight();\n    }\n});\n\nconst rectangle = new Rectangle();\n\nrectangle.setWidth(5);\nrectangle.setHeight(7);\n\nconsole.log(`Total area: ${rectangle.getArea()}`); // Total area: 35\n\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},7266:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(8225);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);